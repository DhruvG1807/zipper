for(int i = 0; i<input.size(); i++){
        //if character is not present in the tree
        if(tree->head->character == ""){
            //output nyt code
            output+=tree->nytCode;
            //output 8 bit ascii code of the character
            output+=fixedCode(e, r, i);
            //update tree
            //create new node with weight 1
            AdaptiveHuffmanTreeNode* newNode = new AdaptiveHuffmanTreeNode();
            newNode->character = input[i];
            newNode->weight = 1;
            //create new nyt node
            AdaptiveHuffmanTreeNode* newNyt = new AdaptiveHuffmanTreeNode();
            newNyt->character = "";
            newNyt->weight = 0;
            //update tree
            tree->head->left = newNyt;
            tree->head->right = newNode;
            tree->head->weight = 1;
            newNyt->parent = tree->head;
            newNode->parent = tree->head;
            tree->head = newNyt;
            //update nyt code
            tree->nytCode = fixedCode(e, r, i);
        }
        //if character is present in the tree
        else{
            //output code of the character
            output+=fixedCode(e, r, i);
            //update tree
            //find node with character = input[i]
            AdaptiveHuffmanTreeNode* node = tree->head;
            string s(1, input[i]);
            while(node->character != s){
                node = node->parent;
            }
            //increment weight of the node
            node->weight+=1;
            //update tree
            //find node with weight = node->weight
            AdaptiveHuffmanTreeNode* node2 = tree->head;
            while(node2->weight != node->weight){
                node2 = node2->parent;
            }
            //if node is not the same as node2
            if(node != node2){
                //swap node and node2
                swap(node, node2);
            }
            //update nyt code
            tree->nytCode = fixedCode(e, r, i);
        }
    }
    return output;